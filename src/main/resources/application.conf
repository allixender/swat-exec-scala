akka.http.server {
  parsing {
    max-content-length = 10M
  }
}

akka {
  loglevel = INFO
}

blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 4
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 16
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 1
}

http {
  ip = "0.0.0.0"
  port = 9001
}

# http://scalikejdbc.org/documentation/configuration.html#scalikejdbc-config
db {
  default {

    user = "username"
    user = ${?JDBC_USER}
    password = "password"
    password = ${?JDBC_PASSWORD}

    # Connection Pool settings
    poolInitialSize=4
    poolMaxSize=16
    poolConnectionTimeoutMillis=1000
    poolValidationQuery="select 1 as one"
    poolFactoryName="commons-dbcp2"

    # db.legacy.driver="org.h2.Driver"
    # db.legacy.url="jdbc:h2:file:./db/db2"
    # db.legacy.user="foo"
    # db.legacy.password="bar"

    # MySQL example
    # driver="com.mysql.jdbc.Driver"
    # url="jdbc:mysql://localhost/scalikejdbc"

    # PostgreSQL example
    # driver="org.postgresql.Driver"
    # url="jdbc:postgresql://localhost:5432/scalikejdbc"

  }
}

# Global settings
# scalikejdbc.global.loggingSQLAndTime.enabled=false
# scalikejdbc.global.loggingSQLAndTime.logLevel=info
# scalikejdbc.global.loggingSQLAndTime.warningEnabled=true
# scalikejdbc.global.loggingSQLAndTime.warningThresholdMillis=1000
# scalikejdbc.global.loggingSQLAndTime.warningLogLevel=warn
# scalikejdbc.global.loggingSQLAndTime.singleLineMode=false
# scalikejdbc.global.loggingSQLAndTime.printUnprocessedStackTrace=false
# scalikejdbc.global.loggingSQLAndTime.stackTraceDepth=10

workdir = "C:\\dev\\build\\scala-swat-exec"
